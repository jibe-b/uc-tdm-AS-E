<?xml version="1.0"?>
<!--
Copyright 2016, 2017 Institut National de la Recherche Agronomique

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<alvisnlp-doc author="" date="" target="org.bibliome.alvisnlp.modules.shell.Shell2">
<!--
Copyright 2016 Institut National de la Recherche Agronomique

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

  <synopsis>
    <p>Starts an interactive shell that allows to query the corpus data structure.</p>
  </synopsis>

  <module-doc>
    <description>
      <p><this/> starts an interactive shell. The user may enter expressions that are evaluated and the result is displayed on the console. The shell retains an history of expressions, this history is recorded in the file <code>$HOME/.alvisnlp/shell_history</code>. <this/> defines a specific library <code>shell</code> that allows to control its behaviour.</p>
      <p>
	<this/> maintains a stack of context elements, the input expression is evaluated with the last element as the context element. The shell library functions <code>move</code> and <code>up</code> allow to pop and push elements on this stack. Each element in this stack may be a result of the evaluation of an expression as a list. <this/> also maintains the result list: the functions <code>next</code> and <code>prev</code> allow to navigate through the list of the current context element.
      </p>

      <h3>Shell Library</h3>
      <function-doc first-ftor="move" synopsis="shell:move(expr)">
	<p>Evaluates <em>expr</em> as a list of elements and pushes the first element to the stack of context elements. If the result is an empty list then nothing happens.</p>
      </function-doc>

      <function-doc first-ftor="up" synopsis="shell:up()">
	<p>Pops the current context element from the stack. If the current context element is the last in the stack, then nothing happens.</p>
      </function-doc>

      <function-doc first-ftor="next" synopsis="shell:next()">
	<p>Sets the current context element to the next one in the same result list (generated by a call to <code>shell:move</code>. If the current context element is the last in the list, then nothing happens.</p>
      </function-doc>

      <function-doc first-ftor="prev" synopsis="shell:prev()">
	<p>Sets the current context element to the previous one in the same result list (generated by a call to <code>shell:move</code>. If the current context element is the first in the list, then nothing happens.</p>
      </function-doc>

      <function-doc first-ftor="layers" synopsis="shell:layers()">
	<p>If the current context element is a section, then <this/> prints on the console the name of the layers contained in the section. If the current context element is not a section, then nothing happens.</p>
      </function-doc>

      <function-doc first-ftor="stack" synopsis="shell:stack()">
	<p><this/> displays on the console the elements in the stack.</p>
      </function-doc>

      <function-doc first-ftor="display" synopsis="shell:display:...()">
	<p>This function controls how <this/> display the evaluation results on the console. The exact effect depends on the functors used:
	<ul>
	  <li><code>features</code>: display the feature key/value pairs of all result elements.</li>
	  <li><code>arguments</code>: display the role/argument pairs of all result tuple.</li>
	  <li><code>layers</code>: display the contents of the layers of all result sections.</li>
	  <li><code>documents</code>: display the documents in the corpus, if the corpus is in the result.</li>
	  <li><code>sections</code>: display the sections in all result documents.</li>
	  <li><code>relations</code>: display the relations in all result sections.</li>
	  <li><code>all</code>: turn on the all display details, this is the equivalent of <code>features:arguments:layers:documents:sections:relations</code>.</li>
	  <li><code>no-features</code>, <code>no-arguments</code>, <code>no-layers</code>, <code>no-documents</code>, <code>no-sections</code>, <code>no-relations</code>: turn off the corresponding display details.</li>
	  <li><code>none</code>: turn off all display details, this is the equivalent of <code>no-features:no-arguments:no-layers:no-documents:no-sections:no-relations</code>.</li>
	</ul>
</p>
      </function-doc>
    </description>
  
    <param-doc name="active">
      <p>Expression evaluated as a boolean with the corpus as context element. If the result is false, then the module does not process the module.</p>
    </param-doc>
  
    <param-doc name="constantAnnotationFeatures">
      <p>Constant features to add to each annotation created by this module</p>
    </param-doc>
  
    <param-doc name="constantDocumentFeatures">
      <p>Constant features to add to each document created by this module</p>
    </param-doc>
  
    <param-doc name="constantRelationFeatures">
      <p>Constant features to add to each relation created by this module</p>
    </param-doc>
  
    <param-doc name="constantSectionFeatures">
      <p>Constant features to add to each section created by this module</p>
    </param-doc>
  
    <param-doc name="constantTupleFeatures">
      <p>Constant features to add to each tuple created by this module</p>
    </param-doc>
  <param-doc name="userFunctions"><p>Set user functions available for this module. If this module is a sequence, then all compounds inherit its functions.</p></param-doc></module-doc>
</alvisnlp-doc>
